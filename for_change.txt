class RDPServer:
    def __init__(self, host='0.0.0.0', port=80):
        print(f"Initializing RDP Server on {host}:{port}")
        # Configuration
        self.REFRESH_RATE = 0.05
        self.SCROLL_SENSITIVITY = 5
        self.IMAGE_QUALITY = 95
        self.BUFFER_SIZE = 1024

        # Server setup
        self.host = host
        self.port = port
        self.socket = None  # Don't create socket yet
        
        # Add running flag and active connections tracking
        self.running = True
        self.active_connections = []
        self.active_threads = []

        # Image state
        self.last_image = None
        self.lock = threading.Lock()
        self.shift_pressed = False

    def start(self):
        """Start the RDP server and listen for connections"""
        try:
            print(f"RDP Server starting on {self.host}:{self.port}")
            
            # Create and setup socket
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.bind((self.host, self.port))
            print("RDP Server bound successfully")
            
            print("Setting socket timeout...")
            self.socket.settimeout(1)
            print("Starting to listen...")
            self.socket.listen(1)
            
            print(f"RDP Server started and listening on {self.host}:{self.port}")
            
            while self.running:
                try:
                    print("Waiting for RDP connection...")
                    conn, addr = self.socket.accept()
                    print(f"New RDP connection from {addr}")
                    
                    # Track active connection
                    self.active_connections.append(conn)
                    
                    # Create and track threads
                    print("Starting display and input handler threads...")
                    display_thread = threading.Thread(target=self.handle_display, args=(conn,))
                    input_thread = threading.Thread(target=self.handle_input, args=(conn,))
                    
                    self.active_threads.extend([display_thread, input_thread])
                    
                    display_thread.start()
                    input_thread.start()
                    print("Handler threads started successfully")
                    
                except socket.timeout:
                    if self.running:
                        continue
                except Exception as e:
                    if self.running:
                        print(f"Server accept error: {e}")
                    break
                    
        except Exception as e:
            print(f"RDP Server startup error: {e}")
            raise

    def stop(self):
        """Stop the RDP server and clean up"""
        print("Stopping RDP server...")
        self.running = False
        
        # Close all active connections
        for conn in self.active_connections[:]:  # Use slice to avoid modification during iteration
            try:
                conn.close()
            except:
                pass
            self.active_connections.remove(conn)
        
        # Close server socket
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None
            
        # Wait for threads to finish
        for thread in self.active_threads:
            if thread.is_alive():
                thread.join(timeout=1.0)
        self.active_threads.clear()
        
        print("RDP server stopped successfully")
