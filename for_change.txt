def handle_start_rdp(self, data):
    """Start RDP server with improved state management"""
    try:
        # Force close any existing RDP server
        if self.rdp_server is not None:
            try:
                logging.info("Stopping existing RDP server before starting a new one")
                self.rdp_server.stop()
                self.rdp_server = None

                # If there's a thread, wait for it to terminate
                if self.rdp_thread and self.rdp_thread.is_alive():
                    self.rdp_thread.join(timeout=2)
                    self.rdp_thread = None

                # Additional sleep to ensure resources are released
                time.sleep(1)
            except Exception as e:
                logging.error(f"Error stopping existing RDP server: {str(e)}")

        # Use the actual server's IP for the RDP connection
        rdp_host = socket.gethostbyname(socket.gethostname())
        rdp_port = 5900  # Default RDP port

        # Create and start RDP server
        self.rdp_server = RDPServer(host='0.0.0.0', port=rdp_port)
        self.rdp_thread = threading.Thread(target=self.rdp_server.start)
        self.rdp_thread.daemon = True
        self.rdp_thread.start()

        # Wait for server to start
        time.sleep(1.5)  # Increased wait time for server startup

        return {
            'status': 'success',
            'data': {
                'ip': rdp_host,
                'port': rdp_port
            }
        }

    except Exception as e:
        logging.error(f"Failed to start RDP server: {str(e)}")
        # Clean up in case of error
        if hasattr(self, 'rdp_server') and self.rdp_server:
            try:
                self.rdp_server.stop()
                self.rdp_server = None
            except:
                pass
        return {
            'status': 'error',
            'message': str(e)
        }
